<div class="form-group">
	<label for="search">@Label</label>
	<input type="text" class="form-control" @bind-value="userInput" @bind-value:event="oninput" @onkeyup="OnKeyUp"/>
</div>

@if(searchResults is not null && searchResults.Count > 0)
{
	<div class="search-result">
		<ul>
			@{
				int itemIndex = 0;
				foreach (var item in searchResults)
				{
					<li @key="item.Id" @onclick="() => HandleSelectItem(item)" class="@(itemIndex == currentItemIndex?"selected":"")">
						@item.Name
					</li>
					itemIndex++;
				}
			}
		</ul>
	</div>
}

@code {
	[Parameter]
	public string Label { get; set; } = string.Empty;

	[Parameter]
	public Func<string, Task<List<ItemViewModel>>>? searchFunction{ get; set;  } // this is the same as the delegate function below

	// public delegate List<ItemViewModel> searchFunction(string searchFilter);

	[Parameter]
	public EventCallback<ItemViewModel> OnItemSelected { get; set; }
	private List<ItemViewModel>? searchResults = null;

	private ItemViewModel? selectedItem = null;

	private string _userInput = string.Empty;
	public string userInput { 
		get => _userInput; 
		set 
		{
			_userInput = value;

			if(!string.IsNullOrWhiteSpace(_userInput) && searchFunction != null)
			{
				ViewItemAsync();
			}
		}
	}
	private ItemViewModel? currentItem = null;
	private int currentItemIndex = -1;

	private async Task ViewItemAsync()
	{
		if(searchFunction != null)
		{
			searchResults = await searchFunction(_userInput);
			StateHasChanged();
		}
	}

	private void HandleSelectItem(ItemViewModel item){
		clearHighlighting();

		if (item != null)
		{
			this.selectedItem = item;
			this.userInput = item.Name ?? string.Empty;
			this.searchResults = null;

			OnItemSelected.InvokeAsync(item);
		}
	}

	private void clearHighlighting()
	{
		searchResults = null;
		currentItem = null;
		currentItemIndex = -1;
	}

	private void OnKeyUp(KeyboardEventArgs e){
		if (searchResults is not null && searchResults.Count > 0 && (e.Code == "ArrowDown" || e.Code == "ArrowUp")){
			if (e.Code == "ArrowDown" && currentItemIndex < searchResults.Count - 1)
			{
				currentItem = searchResults[++currentItemIndex];
			}
			else if (e.Code == "ArrowUp")
			{
				if (currentItemIndex > 0)
				{
					currentItem = searchResults[--currentItemIndex];
				}
				else{
					currentItem = null;
					currentItemIndex = -1;
				}
			}
		}

		else if(e.Code == "Enter" || e.Code == "NumpadEnter")
		{
			HandleSelectItem(currentItem);
		}
	}

	public class ItemViewModel{
		public int Id { get; set; }
		public string Name { get; set; } = string.Empty;
	}
}
