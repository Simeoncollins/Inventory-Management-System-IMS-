@page "/editproduct/{id:int}"

@attribute [Authorize(Policy = "Inventory")]

@rendermode InteractiveServer

@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavManager
<h3>Edit Products</h3>
<br />

@if (this.product is not null)
{
	<EditForm Model="product" OnValidSubmit="update">
	<DataAnnotationsValidator></DataAnnotationsValidator>
	<ValidationSummary></ValidationSummary>
	<InputNumber @bind-Value="product.ProductId" hidden></InputNumber>
	<div class="form-group">
		<label for="name">Product Name</label>
		<InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
		<ValidationMessage For="() => product.ProductName"></ValidationMessage>
	</div>

	<div class="form-group">
		<label for="quantity">Quantity</label>
		<InputNumber id="quantity" @bind-Value="product.Quantity" class="form-control"></InputNumber>
		<ValidationMessage For="() => product.Quantity"></ValidationMessage>
	</div>

	<div class="form-group">
		<label for="price">Price</label>
		<InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
		<ValidationMessage For="() => product.Price"></ValidationMessage>
	</div>

		<div class="form-group">
			<label for="price">Inventories</label>
			<ProductInventoriesComponent product="this.product"></ProductInventoriesComponent>
		</div>
	<br />
	<button type="submit" class="btn btn-primary">Update</button>
	<a href="/products" class="btn btn-danger">Cancel</a>
</EditForm>
}
@code {
	private Product? product { get; set; }

	[Parameter]
	public int id { get; set; }


	protected override async Task OnParametersSetAsync()
	{
		this.product = await ViewProductByIdUseCase.ExecuteAsync(this.id);
	}

	private async Task update()
	{
		if (product is not null)
		{
			await EditProductUseCase.ExecuteAsync(product);
			NavManager.NavigateTo("/products");
		}
	}
}
